//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-25769353
// Cuda compilation tools, release 10.1, V10.1.105
// Based on LLVM 3.4svn
//

.version 6.4
.target sm_30
.address_size 64

	// .globl	__closesthit__radiance
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.const .align 8 .b8 optixLaunchParams[88];
.global .align 1 .b8 $str[45] = {61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 10, 0};
.global .align 1 .b8 $str1[23] = {78, 97, 117, 32, 82, 97, 121, 45, 84, 114, 97, 99, 105, 110, 103, 32, 68, 101, 98, 117, 103, 10, 0};
.global .align 1 .b8 $str2[24] = {76, 105, 103, 104, 116, 80, 111, 115, 58, 32, 37, 102, 44, 32, 37, 102, 32, 37, 102, 32, 37, 102, 10, 0};
.global .align 1 .b8 $str3[19] = {76, 97, 117, 110, 99, 104, 32, 100, 105, 109, 58, 32, 37, 117, 32, 37, 117, 10, 0};
.global .align 1 .b8 $str4[17] = {112, 105, 120, 101, 108, 58, 32, 37, 102, 32, 37, 102, 32, 37, 102, 10, 0};
.global .align 1 .b8 $str5[25] = {99, 101, 110, 116, 114, 111, 32, 99, 97, 109, 101, 114, 97, 58, 32, 37, 102, 32, 37, 102, 32, 37, 102, 10, 0};

.visible .entry __closesthit__radiance(

)
{
	.local .align 4 .b8 	__local_depot0[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<3>;
	.reg .f32 	%f<120>;
	.reg .b32 	%r<18>;
	.reg .f64 	%fd<9>;
	.reg .b64 	%rd<34>;


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd10, %SP, 0;
	add.u64 	%rd1, %SPL, 0;
	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd11, %r1;
	shl.b64 	%rd12, %rd11, 32;
	cvt.u64.u32	%rd13, %r2;
	or.b64  	%rd2, %rd12, %rd13;
	// inline asm
	call (%rd8), _optix_get_sbt_data_ptr_64, ();
	// inline asm
	// inline asm
	call (%r3), _optix_read_primitive_idx, ();
	// inline asm
	ld.u64 	%rd14, [%rd8];
	mul.wide.s32 	%rd15, %r3, 12;
	add.s64 	%rd16, %rd14, %rd15;
	ld.u32 	%r13, [%rd16];
	ld.u32 	%r14, [%rd16+4];
	ld.u32 	%r15, [%rd16+8];
	// inline asm
	call (%f4, %f5), _optix_get_triangle_barycentrics, ();
	// inline asm
	mov.f32 	%f22, 0f3F800000;
	sub.ftz.f32 	%f23, %f22, %f4;
	sub.ftz.f32 	%f24, %f23, %f5;
	cvt.u64.u32	%rd4, %r13;
	ld.u64 	%rd17, [%rd8+16];
	mul.wide.u32 	%rd18, %r13, 16;
	add.s64 	%rd19, %rd17, %rd18;
	ld.v4.f32 	{%f25, %f26, %f27, %f28}, [%rd19];
	mov.u32 	%r7, 0;
	mov.u32 	%r10, 1;
	mov.u32 	%r9, 2;
	cvt.u64.u32	%rd5, %r14;
	mul.wide.u32 	%rd20, %r14, 16;
	add.s64 	%rd21, %rd17, %rd20;
	ld.v4.f32 	{%f32, %f33, %f34, %f35}, [%rd21];
	mul.ftz.f32 	%f39, %f4, %f32;
	mul.ftz.f32 	%f40, %f4, %f33;
	mul.ftz.f32 	%f41, %f4, %f34;
	fma.rn.ftz.f32 	%f42, %f25, %f24, %f39;
	fma.rn.ftz.f32 	%f43, %f26, %f24, %f40;
	fma.rn.ftz.f32 	%f44, %f27, %f24, %f41;
	cvt.u64.u32	%rd6, %r15;
	mul.wide.u32 	%rd22, %r15, 16;
	add.s64 	%rd23, %rd17, %rd22;
	ld.v4.f32 	{%f45, %f46, %f47, %f48}, [%rd23];
	fma.rn.ftz.f32 	%f52, %f5, %f45, %f42;
	fma.rn.ftz.f32 	%f53, %f5, %f46, %f43;
	fma.rn.ftz.f32 	%f54, %f5, %f47, %f44;
	// inline asm
	call (%f6), _optix_get_world_ray_origin_x, ();
	// inline asm
	// inline asm
	call (%f7), _optix_get_world_ray_origin_y, ();
	// inline asm
	// inline asm
	call (%f8), _optix_get_world_ray_origin_z, ();
	// inline asm
	// inline asm
	call (%f9), _optix_get_ray_tmax, ();
	// inline asm
	// inline asm
	call (%f10), _optix_get_world_ray_direction_x, ();
	// inline asm
	// inline asm
	call (%f11), _optix_get_world_ray_direction_y, ();
	// inline asm
	// inline asm
	call (%f12), _optix_get_world_ray_direction_z, ();
	// inline asm
	fma.rn.ftz.f32 	%f13, %f9, %f10, %f6;
	fma.rn.ftz.f32 	%f14, %f9, %f11, %f7;
	fma.rn.ftz.f32 	%f15, %f9, %f12, %f8;
	ld.const.u64 	%rd24, [optixLaunchParams+80];
	cvta.to.global.u64 	%rd25, %rd24;
	ld.global.v4.f32 	{%f55, %f56, %f57, %f58}, [%rd25];
	sub.ftz.f32 	%f62, %f55, %f13;
	sub.ftz.f32 	%f63, %f56, %f14;
	sub.ftz.f32 	%f64, %f57, %f15;
	mul.ftz.f32 	%f65, %f63, %f63;
	fma.rn.ftz.f32 	%f66, %f62, %f62, %f65;
	fma.rn.ftz.f32 	%f67, %f64, %f64, %f66;
	sqrt.approx.ftz.f32 	%f68, %f67;
	add.ftz.f32 	%f20, %f68, 0fBC23D70A;
	rsqrt.approx.ftz.f32 	%f69, %f67;
	mul.ftz.f32 	%f16, %f62, %f69;
	mul.ftz.f32 	%f17, %f63, %f69;
	mul.ftz.f32 	%f18, %f64, %f69;
	mul.ftz.f32 	%f70, %f53, %f53;
	fma.rn.ftz.f32 	%f71, %f52, %f52, %f70;
	fma.rn.ftz.f32 	%f72, %f54, %f54, %f71;
	rsqrt.approx.ftz.f32 	%f73, %f72;
	mul.ftz.f32 	%f74, %f52, %f73;
	mul.ftz.f32 	%f75, %f53, %f73;
	mul.ftz.f32 	%f76, %f54, %f73;
	mul.ftz.f32 	%f77, %f17, %f75;
	fma.rn.ftz.f32 	%f78, %f16, %f74, %f77;
	fma.rn.ftz.f32 	%f79, %f18, %f76, %f78;
	mov.f32 	%f21, 0f00000000;
	max.ftz.f32 	%f3, %f79, %f21;
	mov.u32 	%r16, 1065353216;
	st.local.u32 	[%rd1], %r16;
	shr.u64 	%rd26, %rd10, 32;
	cvt.u32.u64	%r11, %rd26;
	cvt.u32.u64	%r12, %rd10;
	ld.const.u64 	%rd9, [optixLaunchParams+72];
	mov.u32 	%r6, 255;
	mov.f32 	%f19, 0f3A83126F;
	// inline asm
	call (%r4, %r5), _optix_trace_2, (%rd9, %f13, %f14, %f15, %f16, %f17, %f18, %f19, %f20, %f21, %r6, %r7, %r10, %r9, %r10, %r11, %r12);
	// inline asm
	ld.u32 	%r17, [%rd8+48];
	setp.eq.s32	%p1, %r17, 0;
	@%p1 bra 	BB0_3;

	ld.u64 	%rd7, [%rd8+24];
	setp.eq.s64	%p2, %rd7, 0;
	@%p2 bra 	BB0_3;

	shl.b64 	%rd27, %rd4, 4;
	add.s64 	%rd28, %rd7, %rd27;
	ld.v2.f32 	{%f80, %f81}, [%rd28];
	shl.b64 	%rd29, %rd5, 4;
	add.s64 	%rd30, %rd7, %rd29;
	ld.v2.f32 	{%f87, %f88}, [%rd30];
	mul.ftz.f32 	%f91, %f4, %f87;
	mul.ftz.f32 	%f92, %f4, %f88;
	fma.rn.ftz.f32 	%f93, %f24, %f80, %f91;
	fma.rn.ftz.f32 	%f94, %f24, %f81, %f92;
	shl.b64 	%rd31, %rd6, 4;
	add.s64 	%rd32, %rd7, %rd31;
	ld.v2.f32 	{%f95, %f96}, [%rd32];
	fma.rn.ftz.f32 	%f99, %f5, %f95, %f93;
	fma.rn.ftz.f32 	%f100, %f5, %f96, %f94;
	ld.u64 	%rd33, [%rd8+56];
	tex.2d.v4.f32.f32	{%f101, %f102, %f103, %f104}, [%rd33, {%f99, %f100}];
	ld.local.f32 	%f105, [%rd1];
	mul.ftz.f32 	%f106, %f3, %f105;
	cvt.ftz.f64.f32	%fd1, %f106;
	add.f64 	%fd2, %fd1, 0d0000000000000000;
	mov.f64 	%fd3, 0d3FF0000000000000;
	min.f64 	%fd4, %fd2, %fd3;
	cvt.rn.ftz.f32.f64	%f107, %fd4;
	mul.ftz.f32 	%f108, %f107, %f101;
	mul.ftz.f32 	%f109, %f107, %f102;
	mul.ftz.f32 	%f110, %f107, %f103;
	st.f32 	[%rd2], %f108;
	st.f32 	[%rd2+4], %f109;
	st.f32 	[%rd2+8], %f110;
	bra.uni 	BB0_4;

BB0_3:
	ld.local.f32 	%f111, [%rd1];
	mul.ftz.f32 	%f112, %f3, %f111;
	cvt.ftz.f64.f32	%fd5, %f112;
	add.f64 	%fd6, %fd5, 0d0000000000000000;
	mov.f64 	%fd7, 0d3FF0000000000000;
	min.f64 	%fd8, %fd6, %fd7;
	cvt.rn.ftz.f32.f64	%f113, %fd8;
	ld.f32 	%f114, [%rd8+64];
	mul.ftz.f32 	%f115, %f114, %f113;
	ld.f32 	%f116, [%rd8+68];
	mul.ftz.f32 	%f117, %f113, %f116;
	ld.f32 	%f118, [%rd8+72];
	mul.ftz.f32 	%f119, %f113, %f118;
	st.f32 	[%rd2], %f115;
	st.f32 	[%rd2+4], %f117;
	st.f32 	[%rd2+8], %f119;

BB0_4:
	ret;
}

	// .globl	__anyhit__radiance
.visible .entry __anyhit__radiance(

)
{



	ret;
}

	// .globl	__miss__radiance
.visible .entry __miss__radiance(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<6>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u64 	%rd5, 0;
	st.u32 	[%rd4+4], %rd5;
	st.u32 	[%rd4], %rd5;
	mov.u32 	%r3, 1065353216;
	st.u32 	[%rd4+8], %r3;
	ret;
}

	// .globl	__closesthit__shadow
.visible .entry __closesthit__shadow(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<5>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u32 	%r3, 0;
	st.u32 	[%rd4], %r3;
	ret;
}

	// .globl	__anyhit__shadow
.visible .entry __anyhit__shadow(

)
{



	ret;
}

	// .globl	__miss__shadow
.visible .entry __miss__shadow(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<5>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u32 	%r3, 1065353216;
	st.u32 	[%rd4], %r3;
	ret;
}

	// .globl	__closesthit__light
.visible .entry __closesthit__light(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<6>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u64 	%rd5, 1065353216;
	st.u32 	[%rd4+4], %rd5;
	st.u32 	[%rd4], %rd5;
	mov.u32 	%r3, 1065353216;
	st.u32 	[%rd4+8], %r3;
	ret;
}

	// .globl	__anyhit__light
.visible .entry __anyhit__light(

)
{



	ret;
}

	// .globl	__miss__light
.visible .entry __miss__light(

)
{



	ret;
}

	// .globl	__closesthit__light_shadow
.visible .entry __closesthit__light_shadow(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<5>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u32 	%r3, 1065353216;
	st.u32 	[%rd4], %r3;
	ret;
}

	// .globl	__anyhit__light_shadow
.visible .entry __anyhit__light_shadow(

)
{



	ret;
}

	// .globl	__miss__light_shadow
.visible .entry __miss__light_shadow(

)
{



	ret;
}

	// .globl	__closesthit__phong_metal
.visible .entry __closesthit__phong_metal(

)
{
	.local .align 4 .b8 	__local_depot12[12];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .f32 	%f<74>;
	.reg .b32 	%r<17>;
	.reg .b64 	%rd<21>;


	mov.u64 	%SPL, __local_depot12;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd3, %SP, 0;
	add.u64 	%rd4, %SPL, 0;
	// inline asm
	call (%rd1), _optix_get_sbt_data_ptr_64, ();
	// inline asm
	// inline asm
	call (%r1), _optix_read_primitive_idx, ();
	// inline asm
	ld.u64 	%rd5, [%rd1];
	mul.wide.s32 	%rd6, %r1, 12;
	add.s64 	%rd7, %rd5, %rd6;
	ld.u32 	%r13, [%rd7];
	ld.u32 	%r14, [%rd7+4];
	ld.u32 	%r15, [%rd7+8];
	// inline asm
	call (%f1, %f2), _optix_get_triangle_barycentrics, ();
	// inline asm
	mov.f32 	%f19, 0f3F800000;
	sub.ftz.f32 	%f20, %f19, %f1;
	sub.ftz.f32 	%f21, %f20, %f2;
	ld.u64 	%rd8, [%rd1+16];
	mul.wide.u32 	%rd9, %r13, 16;
	add.s64 	%rd10, %rd8, %rd9;
	ld.v4.f32 	{%f22, %f23, %f24, %f25}, [%rd10];
	mov.u32 	%r8, 0;
	mov.u32 	%r7, 2;
	mul.wide.u32 	%rd11, %r14, 16;
	add.s64 	%rd12, %rd8, %rd11;
	ld.v4.f32 	{%f29, %f30, %f31, %f32}, [%rd12];
	mul.ftz.f32 	%f36, %f1, %f29;
	mul.ftz.f32 	%f37, %f1, %f30;
	mul.ftz.f32 	%f38, %f1, %f31;
	fma.rn.ftz.f32 	%f39, %f22, %f21, %f36;
	fma.rn.ftz.f32 	%f40, %f23, %f21, %f37;
	fma.rn.ftz.f32 	%f41, %f24, %f21, %f38;
	mul.wide.u32 	%rd13, %r15, 16;
	add.s64 	%rd14, %rd8, %rd13;
	ld.v4.f32 	{%f42, %f43, %f44, %f45}, [%rd14];
	fma.rn.ftz.f32 	%f49, %f2, %f42, %f39;
	fma.rn.ftz.f32 	%f50, %f2, %f43, %f40;
	fma.rn.ftz.f32 	%f51, %f2, %f44, %f41;
	mul.ftz.f32 	%f52, %f50, %f50;
	fma.rn.ftz.f32 	%f53, %f49, %f49, %f52;
	fma.rn.ftz.f32 	%f54, %f51, %f51, %f53;
	rsqrt.approx.ftz.f32 	%f55, %f54;
	mul.ftz.f32 	%f56, %f49, %f55;
	mul.ftz.f32 	%f57, %f50, %f55;
	mul.ftz.f32 	%f58, %f51, %f55;
	mov.u64 	%rd15, 1065353216;
	st.local.u32 	[%rd4+4], %rd15;
	st.local.u32 	[%rd4], %rd15;
	mov.u32 	%r16, 1065353216;
	st.local.u32 	[%rd4+8], %r16;
	shr.u64 	%rd16, %rd3, 32;
	cvt.u32.u64	%r9, %rd16;
	cvt.u32.u64	%r10, %rd3;
	// inline asm
	call (%f3), _optix_get_world_ray_origin_x, ();
	// inline asm
	// inline asm
	call (%f4), _optix_get_world_ray_origin_y, ();
	// inline asm
	// inline asm
	call (%f5), _optix_get_world_ray_origin_z, ();
	// inline asm
	// inline asm
	call (%f6), _optix_get_ray_tmax, ();
	// inline asm
	// inline asm
	call (%f7), _optix_get_world_ray_direction_x, ();
	// inline asm
	// inline asm
	call (%f8), _optix_get_world_ray_direction_y, ();
	// inline asm
	// inline asm
	call (%f9), _optix_get_world_ray_direction_z, ();
	// inline asm
	fma.rn.ftz.f32 	%f10, %f6, %f7, %f3;
	fma.rn.ftz.f32 	%f11, %f6, %f8, %f4;
	fma.rn.ftz.f32 	%f12, %f6, %f9, %f5;
	add.ftz.f32 	%f59, %f56, %f56;
	add.ftz.f32 	%f60, %f57, %f57;
	add.ftz.f32 	%f61, %f58, %f58;
	mul.ftz.f32 	%f62, %f57, %f8;
	fma.rn.ftz.f32 	%f63, %f56, %f7, %f62;
	fma.rn.ftz.f32 	%f64, %f58, %f9, %f63;
	mul.ftz.f32 	%f65, %f59, %f64;
	mul.ftz.f32 	%f66, %f60, %f64;
	mul.ftz.f32 	%f67, %f61, %f64;
	sub.ftz.f32 	%f13, %f7, %f65;
	sub.ftz.f32 	%f14, %f8, %f66;
	sub.ftz.f32 	%f15, %f9, %f67;
	ld.const.u64 	%rd2, [optixLaunchParams+72];
	mov.u32 	%r4, 255;
	mov.f32 	%f16, 0f3727C5AC;
	mov.f32 	%f17, 0f60AD78EC;
	mov.f32 	%f18, 0f00000000;
	// inline asm
	call (%r2, %r3), _optix_trace_2, (%rd2, %f10, %f11, %f12, %f13, %f14, %f15, %f16, %f17, %f18, %r4, %r8, %r8, %r7, %r8, %r9, %r10);
	// inline asm
	// inline asm
	call (%r11), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r12), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd17, %r11;
	shl.b64 	%rd18, %rd17, 32;
	cvt.u64.u32	%rd19, %r12;
	or.b64  	%rd20, %rd18, %rd19;
	ld.local.f32 	%f68, [%rd4];
	mul.ftz.f32 	%f69, %f68, 0f3F4CCCCD;
	ld.local.f32 	%f70, [%rd4+4];
	mul.ftz.f32 	%f71, %f70, 0f3F4CCCCD;
	ld.local.f32 	%f72, [%rd4+8];
	mul.ftz.f32 	%f73, %f72, 0f3F4CCCCD;
	st.f32 	[%rd20], %f69;
	st.f32 	[%rd20+4], %f71;
	st.f32 	[%rd20+8], %f73;
	ret;
}

	// .globl	__closesthit__phong_glass
.visible .entry __closesthit__phong_glass(

)
{
	.local .align 4 .b8 	__local_depot13[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<6>;
	.reg .f32 	%f<163>;
	.reg .b32 	%r<27>;
	.reg .f64 	%fd<9>;
	.reg .b64 	%rd<30>;


	mov.u64 	%SPL, __local_depot13;
	cvta.local.u64 	%SP, %SPL;
	// inline asm
	call (%rd4), _optix_get_sbt_data_ptr_64, ();
	// inline asm
	// inline asm
	call (%r1), _optix_read_primitive_idx, ();
	// inline asm
	ld.u64 	%rd5, [%rd4];
	mul.wide.s32 	%rd6, %r1, 12;
	add.s64 	%rd7, %rd5, %rd6;
	ld.u32 	%r2, [%rd7];
	ld.u32 	%r3, [%rd7+4];
	ld.u32 	%r4, [%rd7+8];
	// inline asm
	call (%f31, %f32), _optix_get_triangle_barycentrics, ();
	// inline asm
	mov.f32 	%f36, 0f3F800000;
	sub.ftz.f32 	%f37, %f36, %f31;
	sub.ftz.f32 	%f38, %f37, %f32;
	ld.u64 	%rd8, [%rd4+16];
	mul.wide.u32 	%rd9, %r2, 16;
	add.s64 	%rd10, %rd8, %rd9;
	ld.v4.f32 	{%f39, %f40, %f41, %f42}, [%rd10];
	mul.wide.u32 	%rd11, %r3, 16;
	add.s64 	%rd12, %rd8, %rd11;
	ld.v4.f32 	{%f46, %f47, %f48, %f49}, [%rd12];
	mul.ftz.f32 	%f53, %f31, %f46;
	mul.ftz.f32 	%f54, %f31, %f47;
	mul.ftz.f32 	%f55, %f31, %f48;
	fma.rn.ftz.f32 	%f56, %f39, %f38, %f53;
	fma.rn.ftz.f32 	%f57, %f40, %f38, %f54;
	fma.rn.ftz.f32 	%f58, %f41, %f38, %f55;
	mul.wide.u32 	%rd13, %r4, 16;
	add.s64 	%rd14, %rd8, %rd13;
	ld.v4.f32 	{%f59, %f60, %f61, %f62}, [%rd14];
	fma.rn.ftz.f32 	%f66, %f32, %f59, %f56;
	fma.rn.ftz.f32 	%f67, %f32, %f60, %f57;
	fma.rn.ftz.f32 	%f68, %f32, %f61, %f58;
	mul.ftz.f32 	%f69, %f67, %f67;
	fma.rn.ftz.f32 	%f70, %f66, %f66, %f69;
	fma.rn.ftz.f32 	%f71, %f68, %f68, %f70;
	rsqrt.approx.ftz.f32 	%f72, %f71;
	mul.ftz.f32 	%f1, %f66, %f72;
	mul.ftz.f32 	%f2, %f67, %f72;
	mul.ftz.f32 	%f3, %f68, %f72;
	// inline asm
	call (%f33), _optix_get_world_ray_direction_x, ();
	// inline asm
	// inline asm
	call (%f34), _optix_get_world_ray_direction_y, ();
	// inline asm
	// inline asm
	call (%f35), _optix_get_world_ray_direction_z, ();
	// inline asm
	mul.ftz.f32 	%f7, %f1, %f33;
	mul.ftz.f32 	%f8, %f2, %f34;
	add.ftz.f32 	%f73, %f7, %f8;
	mul.ftz.f32 	%f9, %f3, %f35;
	add.ftz.f32 	%f10, %f9, %f73;
	setp.lt.ftz.f32	%p1, %f10, 0f00000000;
	@%p1 bra 	BB13_4;
	bra.uni 	BB13_1;

BB13_4:
	neg.ftz.f32 	%f95, %f8;
	sub.ftz.f32 	%f96, %f95, %f7;
	sub.ftz.f32 	%f162, %f96, %f9;
	mul.ftz.f32 	%f97, %f10, %f10;
	cvt.ftz.f64.f32	%fd5, %f97;
	mov.f64 	%fd6, 0d3FF0000000000000;
	sub.f64 	%fd7, %fd6, %fd5;
	fma.rn.f64 	%fd8, %fd7, 0dBFDBE0DF00000000, 0d3FF0000000000000;
	cvt.rn.ftz.f32.f64	%f20, %fd8;
	setp.lt.ftz.f32	%p3, %f20, 0f00000000;
	mov.f32 	%f159, 0f00000000;
	@%p3 bra 	BB13_5;
	bra.uni 	BB13_6;

BB13_5:
	mov.f32 	%f160, %f159;
	mov.f32 	%f161, %f159;
	bra.uni 	BB13_7;

BB13_1:
	neg.ftz.f32 	%f11, %f1;
	mul.ftz.f32 	%f78, %f33, %f11;
	neg.ftz.f32 	%f12, %f2;
	mul.ftz.f32 	%f79, %f34, %f2;
	sub.ftz.f32 	%f80, %f78, %f79;
	neg.ftz.f32 	%f13, %f3;
	mul.ftz.f32 	%f81, %f35, %f3;
	sub.ftz.f32 	%f14, %f80, %f81;
	mul.ftz.f32 	%f82, %f14, %f14;
	cvt.ftz.f64.f32	%fd1, %f82;
	mov.f64 	%fd2, 0d3FF0000000000000;
	sub.f64 	%fd3, %fd2, %fd1;
	fma.rn.f64 	%fd4, %fd3, 0dC002000000000000, 0d3FF0000000000000;
	cvt.rn.ftz.f32.f64	%f15, %fd4;
	setp.lt.ftz.f32	%p2, %f15, 0f00000000;
	mov.f32 	%f162, 0f00000000;
	@%p2 bra 	BB13_2;
	bra.uni 	BB13_3;

BB13_2:
	mov.f32 	%f159, %f162;
	mov.f32 	%f160, %f162;
	mov.f32 	%f161, %f162;
	bra.uni 	BB13_7;

BB13_6:
	mul.ftz.f32 	%f98, %f33, 0f3F28F5C3;
	sqrt.approx.ftz.f32 	%f99, %f20;
	fma.rn.ftz.f32 	%f100, %f10, 0f3F28F5C3, %f99;
	mul.ftz.f32 	%f101, %f1, %f100;
	mul.ftz.f32 	%f102, %f2, %f100;
	mul.ftz.f32 	%f103, %f3, %f100;
	sub.ftz.f32 	%f159, %f98, %f101;
	mul.ftz.f32 	%f104, %f34, 0f3F28F5C3;
	sub.ftz.f32 	%f160, %f104, %f102;
	mul.ftz.f32 	%f105, %f35, 0f3F28F5C3;
	sub.ftz.f32 	%f161, %f105, %f103;
	bra.uni 	BB13_7;

BB13_3:
	mul.ftz.f32 	%f84, %f33, 0f3FC00000;
	sqrt.approx.ftz.f32 	%f85, %f15;
	fma.rn.ftz.f32 	%f86, %f14, 0f3FC00000, %f85;
	mul.ftz.f32 	%f87, %f86, %f11;
	mul.ftz.f32 	%f88, %f86, %f12;
	mul.ftz.f32 	%f89, %f86, %f13;
	sub.ftz.f32 	%f159, %f84, %f87;
	mul.ftz.f32 	%f90, %f34, 0f3FC00000;
	sub.ftz.f32 	%f160, %f90, %f88;
	mul.ftz.f32 	%f91, %f35, 0f3FC00000;
	sub.ftz.f32 	%f161, %f91, %f89;

BB13_7:
	// inline asm
	call (%f106), _optix_get_world_ray_origin_x, ();
	// inline asm
	// inline asm
	call (%f107), _optix_get_world_ray_origin_y, ();
	// inline asm
	// inline asm
	call (%f108), _optix_get_world_ray_origin_z, ();
	// inline asm
	// inline asm
	call (%f109), _optix_get_ray_tmax, ();
	// inline asm
	fma.rn.ftz.f32 	%f28, %f33, %f109, %f106;
	fma.rn.ftz.f32 	%f29, %f34, %f109, %f107;
	fma.rn.ftz.f32 	%f30, %f35, %f109, %f108;
	add.u64 	%rd15, %SP, 12;
	add.u64 	%rd1, %SPL, 12;
	mov.u64 	%rd16, 0;
	st.local.u32 	[%rd1+4], %rd16;
	st.local.u32 	[%rd1], %rd16;
	mov.u32 	%r5, 0;
	st.local.u32 	[%rd1+8], %r5;
	mul.ftz.f32 	%f110, %f160, %f160;
	fma.rn.ftz.f32 	%f111, %f159, %f159, %f110;
	fma.rn.ftz.f32 	%f112, %f161, %f161, %f111;
	sqrt.approx.ftz.f32 	%f113, %f112;
	setp.leu.ftz.f32	%p4, %f113, 0f00000000;
	@%p4 bra 	BB13_9;

	shr.u64 	%rd19, %rd15, 32;
	cvt.u32.u64	%r14, %rd15;
	cvt.u32.u64	%r13, %rd19;
	ld.const.u64 	%rd17, [optixLaunchParams+72];
	mov.u32 	%r8, 255;
	mov.u32 	%r11, 2;
	mov.f32 	%f120, 0f3727C5AC;
	mov.f32 	%f121, 0f60AD78EC;
	mov.f32 	%f122, 0f00000000;
	// inline asm
	call (%r6, %r7), _optix_trace_2, (%rd17, %f28, %f29, %f30, %f159, %f160, %f161, %f120, %f121, %f122, %r8, %r5, %r5, %r11, %r5, %r13, %r14);
	// inline asm

BB13_9:
	// inline asm
	call (%r15), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r16), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd20, %r15;
	shl.b64 	%rd21, %rd20, 32;
	cvt.u64.u32	%rd22, %r16;
	or.b64  	%rd2, %rd21, %rd22;
	add.u64 	%rd23, %SP, 0;
	add.u64 	%rd3, %SPL, 0;
	st.local.u32 	[%rd3+4], %rd16;
	st.local.u32 	[%rd3], %rd16;
	st.local.u32 	[%rd3+8], %r5;
	setp.gt.ftz.f32	%p5, %f162, 0f00000000;
	@%p5 bra 	BB13_11;
	bra.uni 	BB13_10;

BB13_11:
	add.ftz.f32 	%f133, %f1, %f1;
	mul.ftz.f32 	%f134, %f133, %f10;
	add.ftz.f32 	%f135, %f2, %f2;
	mul.ftz.f32 	%f136, %f135, %f10;
	add.ftz.f32 	%f137, %f3, %f3;
	mul.ftz.f32 	%f138, %f137, %f10;
	sub.ftz.f32 	%f127, %f33, %f134;
	sub.ftz.f32 	%f128, %f34, %f136;
	sub.ftz.f32 	%f129, %f35, %f138;
	shr.u64 	%rd29, %rd23, 32;
	cvt.u32.u64	%r25, %rd29;
	cvt.u32.u64	%r26, %rd23;
	ld.const.u64 	%rd27, [optixLaunchParams+72];
	mov.u32 	%r20, 255;
	mov.u32 	%r23, 2;
	mov.f32 	%f130, 0f3727C5AC;
	mov.f32 	%f131, 0f60AD78EC;
	mov.f32 	%f132, 0f00000000;
	// inline asm
	call (%r18, %r19), _optix_trace_2, (%rd27, %f28, %f29, %f30, %f127, %f128, %f129, %f130, %f131, %f132, %r20, %r5, %r5, %r23, %r5, %r25, %r26);
	// inline asm
	sub.ftz.f32 	%f140, %f36, %f162;
	lg2.approx.ftz.f32 	%f141, %f140;
	mul.ftz.f32 	%f142, %f141, 0f40A00000;
	ex2.approx.ftz.f32 	%f143, %f142;
	sub.ftz.f32 	%f144, %f36, 0f3D23D70B;
	fma.rn.ftz.f32 	%f145, %f143, %f144, 0f3D23D70B;
	sub.ftz.f32 	%f146, %f36, %f145;
	ld.local.f32 	%f147, [%rd1];
	ld.local.f32 	%f148, [%rd1+4];
	ld.local.f32 	%f149, [%rd1+8];
	ld.local.f32 	%f150, [%rd3];
	mul.ftz.f32 	%f151, %f145, %f150;
	ld.local.f32 	%f152, [%rd3+4];
	mul.ftz.f32 	%f153, %f145, %f152;
	ld.local.f32 	%f154, [%rd3+8];
	mul.ftz.f32 	%f155, %f145, %f154;
	fma.rn.ftz.f32 	%f156, %f147, %f146, %f151;
	fma.rn.ftz.f32 	%f157, %f148, %f146, %f153;
	fma.rn.ftz.f32 	%f158, %f149, %f146, %f155;
	st.f32 	[%rd2], %f156;
	st.f32 	[%rd2+4], %f157;
	st.f32 	[%rd2+8], %f158;
	bra.uni 	BB13_12;

BB13_10:
	ld.local.u32 	%rd25, [%rd1];
	ld.local.f32 	%f123, [%rd1+8];
	ld.local.u32 	%rd26, [%rd1+4];
	st.u32 	[%rd2+4], %rd26;
	st.u32 	[%rd2], %rd25;
	st.f32 	[%rd2+8], %f123;

BB13_12:
	ret;
}

	// .globl	__anyhit__phong_glass
.visible .entry __anyhit__phong_glass(

)
{



	ret;
}

	// .globl	__miss__phong_glass
.visible .entry __miss__phong_glass(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<6>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u64 	%rd5, 0;
	st.u32 	[%rd4+4], %rd5;
	st.u32 	[%rd4], %rd5;
	mov.u32 	%r3, 1065353216;
	st.u32 	[%rd4+8], %r3;
	ret;
}

	// .globl	__closesthit__shadow_glass
.visible .entry __closesthit__shadow_glass(

)
{
	.local .align 4 .b8 	__local_depot16[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .f32 	%f<19>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<9>;


	mov.u64 	%SPL, __local_depot16;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd2, %SP, 0;
	add.u64 	%rd3, %SPL, 0;
	mov.u32 	%r12, 1065353216;
	st.local.u32 	[%rd3], %r12;
	shr.u64 	%rd4, %rd2, 32;
	cvt.u32.u64	%r8, %rd4;
	cvt.u32.u64	%r9, %rd2;
	// inline asm
	call (%f1), _optix_get_world_ray_origin_x, ();
	// inline asm
	// inline asm
	call (%f2), _optix_get_world_ray_origin_y, ();
	// inline asm
	// inline asm
	call (%f3), _optix_get_world_ray_origin_z, ();
	// inline asm
	// inline asm
	call (%f4), _optix_get_ray_tmax, ();
	// inline asm
	// inline asm
	call (%f5), _optix_get_world_ray_direction_x, ();
	// inline asm
	// inline asm
	call (%f6), _optix_get_world_ray_direction_y, ();
	// inline asm
	// inline asm
	call (%f7), _optix_get_world_ray_direction_z, ();
	// inline asm
	fma.rn.ftz.f32 	%f8, %f4, %f5, %f1;
	fma.rn.ftz.f32 	%f9, %f4, %f6, %f2;
	fma.rn.ftz.f32 	%f10, %f4, %f7, %f3;
	ld.const.u64 	%rd1, [optixLaunchParams+72];
	mov.u32 	%r3, 255;
	mov.u32 	%r4, 0;
	mov.u32 	%r6, 2;
	mov.u32 	%r7, 1;
	mov.f32 	%f14, 0f3A83126F;
	mov.f32 	%f15, 0f60AD78EC;
	mov.f32 	%f16, 0f00000000;
	// inline asm
	call (%r1, %r2), _optix_trace_2, (%rd1, %f8, %f9, %f10, %f5, %f6, %f7, %f14, %f15, %f16, %r3, %r4, %r7, %r6, %r7, %r8, %r9);
	// inline asm
	// inline asm
	call (%r10), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r11), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd5, %r10;
	shl.b64 	%rd6, %rd5, 32;
	cvt.u64.u32	%rd7, %r11;
	or.b64  	%rd8, %rd6, %rd7;
	ld.local.f32 	%f17, [%rd3];
	mul.ftz.f32 	%f18, %f17, 0f3F733333;
	st.f32 	[%rd8], %f18;
	ret;
}

	// .globl	__anyhit__shadow_glass
.visible .entry __anyhit__shadow_glass(

)
{



	ret;
}

	// .globl	__miss__shadow_glass
.visible .entry __miss__shadow_glass(

)
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<5>;


	// inline asm
	call (%r1), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r2), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd1, %r1;
	shl.b64 	%rd2, %rd1, 32;
	cvt.u64.u32	%rd3, %r2;
	or.b64  	%rd4, %rd2, %rd3;
	mov.u32 	%r3, 1065353216;
	st.u32 	[%rd4], %r3;
	ret;
}

	// .globl	__raygen__renderFrame
.visible .entry __raygen__renderFrame(

)
{
	.local .align 16 .b8 	__local_depot19[48];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<9>;
	.reg .f32 	%f<265>;
	.reg .b32 	%r<127>;
	.reg .f64 	%fd<12>;
	.reg .b64 	%rd<34>;


	mov.u64 	%SPL, __local_depot19;
	cvta.local.u64 	%SP, %SPL;
	// inline asm
	call (%r19), _optix_get_launch_index_x, ();
	// inline asm
	// inline asm
	call (%r20), _optix_get_launch_index_y, ();
	// inline asm
	ld.const.u32 	%r25, [optixLaunchParams+16];
	cvt.rn.f32.s32	%f1, %r25;
	ld.const.u64 	%rd1, [optixLaunchParams+80];
	cvta.to.global.u64 	%rd4, %rd1;
	ld.global.v4.f32 	{%f60, %f61, %f62, %f63}, [%rd4+16];
	or.b32  	%r26, %r20, %r19;
	ld.const.u32 	%r27, [optixLaunchParams];
	or.b32  	%r28, %r26, %r27;
	// inline asm
	call (%r22), _optix_get_launch_dimension_x, ();
	// inline asm
	// inline asm
	call (%r23), _optix_get_launch_dimension_y, ();
	// inline asm
	setp.ne.s32	%p1, %r28, 0;
	@%p1 bra 	BB19_2;

	mov.u64 	%rd5, $str;
	cvta.global.u64 	%rd6, %rd5;
	mov.u64 	%rd7, 0;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd6;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r29, [retval0+0];
	
	//{
	}// Callseq End 0
	mov.u64 	%rd8, $str1;
	cvta.global.u64 	%rd9, %rd8;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd9;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r30, [retval0+0];
	
	//{
	}// Callseq End 1
	ld.global.v4.f32 	{%f64, %f65, %f66, %f67}, [%rd4];
	cvt.ftz.f64.f32	%fd5, %f65;
	cvt.ftz.f64.f32	%fd6, %f64;
	add.u64 	%rd11, %SP, 0;
	add.u64 	%rd12, %SPL, 0;
	st.local.v2.f64 	[%rd12], {%fd6, %fd5};
	cvt.ftz.f64.f32	%fd7, %f67;
	cvt.ftz.f64.f32	%fd8, %f66;
	st.local.v2.f64 	[%rd12+16], {%fd8, %fd7};
	mov.u64 	%rd13, $str2;
	cvta.global.u64 	%rd14, %rd13;
	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd14;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd11;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r31, [retval0+0];
	
	//{
	}// Callseq End 2
	st.local.v2.u32 	[%rd12], {%r22, %r23};
	mov.u64 	%rd15, $str3;
	cvta.global.u64 	%rd16, %rd15;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd16;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd11;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r32, [retval0+0];
	
	//{
	}// Callseq End 3
	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd6;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd7;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r33, [retval0+0];
	
	//{
	}// Callseq End 4

BB19_2:
	add.u64 	%rd17, %SP, 32;
	add.u64 	%rd2, %SPL, 32;
	mov.u64 	%rd18, 1065353216;
	st.local.u32 	[%rd2+4], %rd18;
	st.local.u32 	[%rd2], %rd18;
	mov.u32 	%r34, 1065353216;
	st.local.u32 	[%rd2+8], %r34;
	cvt.rn.f32.s32	%f75, %r19;
	add.ftz.f32 	%f76, %f75, 0f3F000000;
	cvt.rn.f32.s32	%f77, %r20;
	add.ftz.f32 	%f78, %f77, 0f3F000000;
	cvt.rn.f32.u32	%f79, %r22;
	div.approx.ftz.f32 	%f80, %f76, %f79;
	cvt.rn.f32.u32	%f81, %r23;
	div.approx.ftz.f32 	%f82, %f78, %f81;
	fma.rn.ftz.f32 	%f83, %f80, 0f40000000, 0fBF800000;
	fma.rn.ftz.f32 	%f84, %f82, 0f40000000, 0fBF800000;
	neg.ftz.f32 	%f85, %f83;
	ld.const.v2.f32 	{%f86, %f87}, [optixLaunchParams+48];
	ld.const.v2.f32 	{%f90, %f91}, [optixLaunchParams+56];
	ld.const.v2.f32 	{%f94, %f95}, [optixLaunchParams+24];
	fma.rn.ftz.f32 	%f96, %f86, %f85, %f94;
	fma.rn.ftz.f32 	%f97, %f87, %f85, %f95;
	ld.const.v2.f32 	{%f98, %f99}, [optixLaunchParams+32];
	fma.rn.ftz.f32 	%f100, %f85, %f90, %f98;
	neg.ftz.f32 	%f101, %f84;
	ld.const.v2.f32 	{%f102, %f103}, [optixLaunchParams+64];
	fma.rn.ftz.f32 	%f10, %f101, %f91, %f96;
	fma.rn.ftz.f32 	%f11, %f101, %f102, %f97;
	fma.rn.ftz.f32 	%f12, %f101, %f103, %f100;
	sub.ftz.f32 	%f106, %f10, %f94;
	sub.ftz.f32 	%f107, %f11, %f95;
	sub.ftz.f32 	%f108, %f12, %f98;
	ld.const.v2.f32 	{%f109, %f110}, [optixLaunchParams+40];
	mul.ftz.f32 	%f111, %f107, %f109;
	fma.rn.ftz.f32 	%f112, %f106, %f99, %f111;
	fma.rn.ftz.f32 	%f113, %f108, %f110, %f112;
	mul.ftz.f32 	%f114, %f107, %f107;
	fma.rn.ftz.f32 	%f115, %f106, %f106, %f114;
	fma.rn.ftz.f32 	%f116, %f108, %f108, %f115;
	sqrt.approx.ftz.f32 	%f117, %f116;
	mul.ftz.f32 	%f118, %f109, %f109;
	fma.rn.ftz.f32 	%f119, %f99, %f99, %f118;
	fma.rn.ftz.f32 	%f120, %f110, %f110, %f119;
	sqrt.approx.ftz.f32 	%f15, %f120;
	mul.ftz.f32 	%f121, %f117, %f15;
	div.approx.ftz.f32 	%f122, %f113, %f121;
	abs.ftz.f32 	%f123, %f122;
	mov.f32 	%f124, 0f3F800000;
	sub.ftz.f32 	%f125, %f124, %f123;
	mul.ftz.f32 	%f126, %f125, 0f3F000000;
	sqrt.approx.ftz.f32 	%f127, %f126;
	setp.gt.ftz.f32	%p2, %f123, 0f3F11EB85;
	selp.f32	%f128, %f127, %f123, %p2;
	mul.ftz.f32 	%f129, %f128, %f128;
	mov.f32 	%f130, 0f3C94D2E9;
	mov.f32 	%f131, 0f3D53F941;
	fma.rn.ftz.f32 	%f132, %f131, %f129, %f130;
	mov.f32 	%f133, 0f3D3F841F;
	fma.rn.ftz.f32 	%f134, %f132, %f129, %f133;
	mov.f32 	%f135, 0f3D994929;
	fma.rn.ftz.f32 	%f136, %f134, %f129, %f135;
	mov.f32 	%f137, 0f3E2AAB94;
	fma.rn.ftz.f32 	%f138, %f136, %f129, %f137;
	mul.ftz.f32 	%f139, %f129, %f138;
	fma.rn.ftz.f32 	%f140, %f139, %f128, %f128;
	add.ftz.f32 	%f141, %f140, %f140;
	mov.f32 	%f142, 0f3FC90FDB;
	sub.ftz.f32 	%f143, %f142, %f140;
	selp.f32	%f144, %f141, %f143, %p2;
	setp.lt.ftz.f32	%p3, %f122, 0f00000000;
	mov.f32 	%f145, 0f40490FDB;
	sub.ftz.f32 	%f146, %f145, %f144;
	selp.f32	%f147, %f146, %f144, %p3;
	cos.approx.ftz.f32 	%f148, %f147;
	mul.ftz.f32 	%f149, %f117, %f148;
	sub.ftz.f32 	%f150, %f62, %f149;
	fma.rn.ftz.f32 	%f16, %f99, %f150, %f94;
	fma.rn.ftz.f32 	%f17, %f109, %f150, %f95;
	fma.rn.ftz.f32 	%f18, %f150, %f110, %f98;
	sub.ftz.f32 	%f151, %f10, %f16;
	sub.ftz.f32 	%f152, %f11, %f17;
	mul.ftz.f32 	%f153, %f152, %f152;
	fma.rn.ftz.f32 	%f154, %f151, %f151, %f153;
	sub.ftz.f32 	%f155, %f12, %f18;
	fma.rn.ftz.f32 	%f156, %f155, %f155, %f154;
	sqrt.approx.ftz.f32 	%f157, %f156;
	div.approx.ftz.f32 	%f158, %f60, %f62;
	sub.ftz.f32 	%f159, %f16, %f10;
	sub.ftz.f32 	%f160, %f17, %f11;
	sub.ftz.f32 	%f161, %f18, %f12;
	mul.ftz.f32 	%f162, %f160, %f160;
	fma.rn.ftz.f32 	%f163, %f159, %f159, %f162;
	fma.rn.ftz.f32 	%f164, %f161, %f161, %f163;
	rsqrt.approx.ftz.f32 	%f165, %f164;
	mul.ftz.f32 	%f166, %f159, %f165;
	mul.ftz.f32 	%f167, %f160, %f165;
	mul.ftz.f32 	%f168, %f161, %f165;
	fma.rn.ftz.f32 	%f169, %f157, %f158, %f157;
	fma.rn.ftz.f32 	%f19, %f169, %f166, %f10;
	fma.rn.ftz.f32 	%f20, %f169, %f167, %f11;
	fma.rn.ftz.f32 	%f21, %f169, %f168, %f12;
	mov.f32 	%f256, 0f00000000;
	setp.leu.ftz.f32	%p4, %f1, 0f00000000;
	mov.f32 	%f257, %f256;
	mov.f32 	%f258, %f256;
	@%p4 bra 	BB19_12;

	shr.u64 	%rd20, %rd17, 32;
	cvt.u32.u64	%r126, %rd17;
	cvt.u32.u64	%r125, %rd20;
	ld.const.u64 	%rd3, [optixLaunchParams+72];
	mul.ftz.f32 	%f22, %f1, %f1;
	cvt.ftz.f64.f32	%fd1, %f10;
	cvt.ftz.f64.f32	%fd2, %f11;
	cvt.ftz.f64.f32	%fd3, %f12;
	cvt.ftz.f64.f32	%fd4, %f98;
	rcp.approx.ftz.f32 	%f174, %f15;
	mul.ftz.f32 	%f23, %f174, %f99;
	mul.ftz.f32 	%f24, %f174, %f109;
	mul.ftz.f32 	%f25, %f174, %f110;
	mul.ftz.f32 	%f26, %f24, 0f00000000;
	mul.ftz.f32 	%f27, %f25, 0f00000000;
	mul.ftz.f32 	%f28, %f23, 0f00000000;
	sub.ftz.f32 	%f175, %f27, %f26;
	sub.ftz.f32 	%f176, %f28, %f25;
	sub.ftz.f32 	%f177, %f24, %f28;
	mul.ftz.f32 	%f178, %f175, %f175;
	fma.rn.ftz.f32 	%f179, %f176, %f176, %f178;
	fma.rn.ftz.f32 	%f29, %f177, %f177, %f179;
	sub.ftz.f32 	%f180, %f25, %f26;
	sub.ftz.f32 	%f181, %f28, %f27;
	sub.ftz.f32 	%f182, %f26, %f23;
	mul.ftz.f32 	%f183, %f181, %f181;
	fma.rn.ftz.f32 	%f184, %f180, %f180, %f183;
	fma.rn.ftz.f32 	%f30, %f182, %f182, %f184;
	mov.f32 	%f173, 0f00000000;
	mov.u32 	%r35, 0;
	rsqrt.approx.ftz.f32 	%f196, %f29;
	rsqrt.approx.ftz.f32 	%f192, %f30;
	mov.f32 	%f251, %f173;
	mov.u32 	%r121, %r35;
	mov.f32 	%f256, %f173;
	mov.f32 	%f257, %f173;
	mov.f32 	%f258, %f173;

BB19_4:
	mul.ftz.f32 	%f36, %f1, %f251;
	mov.f32 	%f255, %f173;
	mov.u32 	%r124, %r35;

BB19_5:
	add.ftz.f32 	%f186, %f23, %f26;
	add.ftz.f32 	%f187, %f186, %f27;
	cvt.ftz.f64.f32	%fd9, %f187;
	setp.lt.f64	%p5, %fd9, 0d3FB999999999999A;
	add.ftz.f32 	%f188, %f36, %f255;
	cvt.rzi.ftz.u32.f32	%r37, %f188;
	shl.b32 	%r38, %r37, 4;
	add.s32 	%r39, %r38, -1556008596;
	add.s32 	%r40, %r37, -1640531527;
	shr.u32 	%r41, %r37, 5;
	add.s32 	%r42, %r41, -939442524;
	xor.b32  	%r43, %r39, %r40;
	xor.b32  	%r44, %r43, %r42;
	mad.lo.s32 	%r45, %r22, %r19, %r20;
	add.s32 	%r46, %r45, %r44;
	shl.b32 	%r47, %r46, 4;
	add.s32 	%r48, %r47, -1383041155;
	add.s32 	%r49, %r46, -1640531527;
	xor.b32  	%r50, %r48, %r49;
	shr.u32 	%r51, %r46, 5;
	add.s32 	%r52, %r51, 2123724318;
	xor.b32  	%r53, %r50, %r52;
	add.s32 	%r54, %r53, %r37;
	shl.b32 	%r55, %r54, 4;
	add.s32 	%r56, %r55, -1556008596;
	add.s32 	%r57, %r54, 1013904242;
	shr.u32 	%r58, %r54, 5;
	add.s32 	%r59, %r58, -939442524;
	xor.b32  	%r60, %r56, %r57;
	xor.b32  	%r61, %r60, %r59;
	add.s32 	%r62, %r61, %r46;
	shl.b32 	%r63, %r62, 4;
	add.s32 	%r64, %r63, -1383041155;
	add.s32 	%r65, %r62, 1013904242;
	xor.b32  	%r66, %r64, %r65;
	shr.u32 	%r67, %r62, 5;
	add.s32 	%r68, %r67, 2123724318;
	xor.b32  	%r69, %r66, %r68;
	add.s32 	%r70, %r69, %r54;
	shl.b32 	%r71, %r70, 4;
	add.s32 	%r72, %r71, -1556008596;
	add.s32 	%r73, %r70, -626627285;
	shr.u32 	%r74, %r70, 5;
	add.s32 	%r75, %r74, -939442524;
	xor.b32  	%r76, %r72, %r73;
	xor.b32  	%r77, %r76, %r75;
	add.s32 	%r78, %r77, %r62;
	shl.b32 	%r79, %r78, 4;
	add.s32 	%r80, %r79, -1383041155;
	add.s32 	%r81, %r78, -626627285;
	xor.b32  	%r82, %r80, %r81;
	shr.u32 	%r83, %r78, 5;
	add.s32 	%r84, %r83, 2123724318;
	xor.b32  	%r85, %r82, %r84;
	add.s32 	%r86, %r85, %r70;
	shl.b32 	%r87, %r86, 4;
	add.s32 	%r88, %r87, -1556008596;
	add.s32 	%r89, %r86, 2027808484;
	shr.u32 	%r90, %r86, 5;
	add.s32 	%r91, %r90, -939442524;
	xor.b32  	%r92, %r88, %r89;
	xor.b32  	%r93, %r92, %r91;
	add.s32 	%r94, %r93, %r78;
	mad.lo.s32 	%r95, %r94, 1664525, 1013904223;
	and.b32  	%r96, %r95, 16777215;
	cvt.rn.f32.u32	%f189, %r96;
	mov.f32 	%f190, 0f4B800000;
	div.approx.ftz.f32 	%f41, %f189, %f190;
	mad.lo.s32 	%r97, %r95, 1664525, 7271263;
	and.b32  	%r98, %r97, 16777215;
	cvt.rn.f32.u32	%f191, %r98;
	div.approx.ftz.f32 	%f42, %f191, %f190;
	@%p5 bra 	BB19_7;
	bra.uni 	BB19_6;

BB19_7:
	mul.ftz.f32 	%f259, %f175, %f196;
	mul.ftz.f32 	%f260, %f176, %f196;
	mul.ftz.f32 	%f261, %f177, %f196;
	bra.uni 	BB19_8;

BB19_6:
	mul.ftz.f32 	%f259, %f180, %f192;
	mul.ftz.f32 	%f260, %f181, %f192;
	mul.ftz.f32 	%f261, %f182, %f192;

BB19_8:
	or.b32  	%r120, %r20, %r19;
	add.u64 	%rd32, %SPL, 32;
	mul.ftz.f32 	%f209, %f61, %f41;
	mul.ftz.f32 	%f210, %f42, 0f40C90FDB;
	mov.u32 	%r105, 0;
	mul.ftz.f32 	%f211, %f24, %f261;
	mul.ftz.f32 	%f212, %f25, %f260;
	sub.ftz.f32 	%f213, %f212, %f211;
	mul.ftz.f32 	%f214, %f25, %f259;
	mul.ftz.f32 	%f215, %f23, %f261;
	sub.ftz.f32 	%f216, %f215, %f214;
	mul.ftz.f32 	%f217, %f23, %f260;
	mul.ftz.f32 	%f218, %f24, %f259;
	sub.ftz.f32 	%f219, %f218, %f217;
	mul.ftz.f32 	%f220, %f216, %f216;
	fma.rn.ftz.f32 	%f221, %f213, %f213, %f220;
	fma.rn.ftz.f32 	%f222, %f219, %f219, %f221;
	rsqrt.approx.ftz.f32 	%f223, %f222;
	mul.ftz.f32 	%f224, %f213, %f223;
	mul.ftz.f32 	%f225, %f216, %f223;
	mul.ftz.f32 	%f226, %f219, %f223;
	cos.approx.ftz.f32 	%f227, %f210;
	sin.approx.ftz.f32 	%f228, %f210;
	mul.ftz.f32 	%f229, %f224, %f228;
	mul.ftz.f32 	%f230, %f225, %f228;
	mul.ftz.f32 	%f231, %f226, %f228;
	fma.rn.ftz.f32 	%f232, %f259, %f227, %f229;
	fma.rn.ftz.f32 	%f233, %f260, %f227, %f230;
	fma.rn.ftz.f32 	%f234, %f261, %f227, %f231;
	fma.rn.ftz.f32 	%f200, %f209, %f232, %f16;
	fma.rn.ftz.f32 	%f201, %f209, %f233, %f17;
	fma.rn.ftz.f32 	%f202, %f209, %f234, %f18;
	sub.ftz.f32 	%f235, %f19, %f200;
	sub.ftz.f32 	%f236, %f20, %f201;
	sub.ftz.f32 	%f237, %f21, %f202;
	mul.ftz.f32 	%f238, %f236, %f236;
	fma.rn.ftz.f32 	%f239, %f235, %f235, %f238;
	fma.rn.ftz.f32 	%f240, %f237, %f237, %f239;
	rsqrt.approx.ftz.f32 	%f241, %f240;
	mul.ftz.f32 	%f203, %f241, %f235;
	mul.ftz.f32 	%f204, %f241, %f236;
	mul.ftz.f32 	%f205, %f241, %f237;
	mov.u32 	%r101, 255;
	mov.u32 	%r104, 2;
	mov.f32 	%f207, 0f60AD78EC;
	mov.f32 	%f208, 0f00000000;
	// inline asm
	call (%r125, %r126), _optix_trace_2, (%rd3, %f200, %f201, %f202, %f203, %f204, %f205, %f208, %f207, %f208, %r101, %r105, %r105, %r104, %r105, %r125, %r126);
	// inline asm
	ld.local.f32 	%f242, [%rd32];
	div.approx.ftz.f32 	%f243, %f242, %f22;
	add.ftz.f32 	%f258, %f258, %f243;
	ld.local.f32 	%f244, [%rd32+4];
	div.approx.ftz.f32 	%f245, %f244, %f22;
	add.ftz.f32 	%f256, %f256, %f245;
	ld.local.f32 	%f246, [%rd32+8];
	div.approx.ftz.f32 	%f247, %f246, %f22;
	add.ftz.f32 	%f257, %f257, %f247;
	setp.ne.s32	%p6, %r120, 0;
	@%p6 bra 	BB19_10;

	add.u64 	%rd22, %SP, 0;
	add.u64 	%rd23, %SPL, 0;
	st.local.v2.f64 	[%rd23], {%fd1, %fd2};
	st.local.f64 	[%rd23+16], %fd3;
	mov.u64 	%rd24, $str4;
	cvta.global.u64 	%rd25, %rd24;
	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd25;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd22;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r109, [retval0+0];
	
	//{
	}// Callseq End 5
	cvt.ftz.f64.f32	%fd10, %f94;
	cvt.ftz.f64.f32	%fd11, %f95;
	st.local.v2.f64 	[%rd23], {%fd10, %fd11};
	st.local.f64 	[%rd23+16], %fd4;
	mov.u64 	%rd26, $str5;
	cvta.global.u64 	%rd27, %rd26;
	// Callseq Start 6
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rd27;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd22;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r110, [retval0+0];
	
	//{
	}// Callseq End 6

BB19_10:
	add.s32 	%r124, %r124, 1;
	cvt.rn.f32.s32	%f255, %r124;
	setp.lt.ftz.f32	%p7, %f255, %f1;
	@%p7 bra 	BB19_5;

	add.s32 	%r121, %r121, 1;
	cvt.rn.f32.s32	%f251, %r121;
	setp.lt.ftz.f32	%p8, %f251, %f1;
	@%p8 bra 	BB19_4;

BB19_12:
	mul.ftz.f32 	%f248, %f258, 0f437F0000;
	cvt.rzi.ftz.s32.f32	%r111, %f248;
	mul.ftz.f32 	%f249, %f256, 0f437F0000;
	cvt.rzi.ftz.s32.f32	%r112, %f249;
	mul.ftz.f32 	%f250, %f257, 0f437F0000;
	cvt.rzi.ftz.s32.f32	%r113, %f250;
	shl.b32 	%r114, %r112, 8;
	shl.b32 	%r115, %r113, 16;
	or.b32  	%r116, %r111, %r114;
	or.b32  	%r117, %r116, %r115;
	or.b32  	%r118, %r117, -16777216;
	mad.lo.s32 	%r119, %r22, %r20, %r19;
	ld.const.u64 	%rd28, [optixLaunchParams+8];
	cvta.to.global.u64 	%rd29, %rd28;
	mul.wide.u32 	%rd30, %r119, 4;
	add.s64 	%rd31, %rd29, %rd30;
	st.global.u32 	[%rd31], %r118;
	ret;
}


